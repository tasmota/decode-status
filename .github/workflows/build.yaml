name: "pre-release"

on:
  push:
    branches:
      - "master"

jobs:
  create-prelease:
    name: Create Pre-release
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: create release
        id: create_release 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: true
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v3
        with:
          name: release_url
          path: release_url.txt

  build-upload-win:
    needs: [create-prelease]
    name: "Build and upload Windows assets"

    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, x86]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          architecture: ${{ matrix.architecture }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build ${{ matrix.architecture }} with pyinstaller
        run: |
          pyinstaller ds-build-win-${{ matrix.architecture }}.spec
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v3
        with:
          name: release_url
      - name: Get Pre-release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Debug
        shell: bash
        run: |
          echo `ls -la dist/`
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/decode-status-${{ matrix.architecture }}.exe
          asset_name: decode-status-${{ matrix.architecture }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  build-upload-mac:
    needs: [create-prelease]
    name: "Build and upload MacOS assets"

    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build with pyinstaller
        run: |
          pyinstaller ds-build-mac.spec
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v3
        with:
          name: release_url
      - name: Get Pre-release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Debug
        shell: bash
        run: |
          echo `ls -la dist/`
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: dist/decode-status
          asset_name: decode-status
          asset_content_type: applications/octet-stream
